# Manually triggered using GitHub UI. 
# Please, open Actions tab, choose workflow "Create GitHub Package Manually" and press "Run workflow"
# In progress
name: Create GitHub Package Manually

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release name. String"
        default: "some test"
        required: true
      version:
        description: "Version (release only). String"
        default: "some test"
        required: true
      draft:
        description: "Draft (release only). Boolean"
        default: "false"
        required: true
      image-name:
        description: "Image name for the GitHub Packages"
        default: "atlas-osb"
        required: true
        

jobs:

  build:
    name: Build
    runs-on: ubuntu-18.04
    steps:

    - name: Set up Go latest
      uses: actions/setup-go@v1
      with:
        go-version: 1.14.2
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Build Binary
      run: |
        set -x
        ls -l
        echo $(go version)
        version=$(git describe --always --dirty)
        echo "Building version=${version}"
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -ldflags="-s -w -X main.releaseVersion=${version}" -o .
        tar czvf mongodb-atlas-service-broker.tar.gz mongodb-atlas-service-broker

    - name: Publish Package
      id: publish_package
      run: |
        IMAGE_NAME=${{ github.event.inputs.image-name }}
        docker build . --file Dockerfile --tag $IMAGE_NAME

        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/atlas-osb
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        
        VERSION="latest" #TODO
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin #TODO ?
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION        

    - name: Create Release
      # if: github.event_name == 'release'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.event.inputs.release }} Release ${{ github.ref }}
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./mongodb-atlas-service-broker.tar.gz
        asset_name: mongodb-atlas-service-broker.tar.gz
        asset_content_type: application/tgz
